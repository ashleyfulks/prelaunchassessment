"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateInlineMap = generateInlineMap;
exports.partialVlqMapToSourceMap = partialVlqMapToSourceMap;

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function generateInlineMap(map) {
  return `data:application/json;charset=utf-8;base64,${Buffer.from(map).toString("base64")}`;
}

function normalisePath(filepath) {
  return filepath.replace(/\\/g, "/");
}

function relatifyPath(filepath, rootDir) {
  // Sourcemaps are made for web, so replace backslashes with regular slashes
  filepath = normalisePath(filepath); // Make root paths relative to the rootDir

  if (filepath[0] === "/") {
    filepath = normalisePath(_path.default.relative(rootDir, filepath));
  } // Prefix relative paths with ./ as it makes it more clear and probably prevents issues


  if (filepath[0] !== ".") {
    filepath = `./${filepath}`;
  }

  return filepath;
}

async function partialVlqMapToSourceMap(map, {
  fs,
  file,
  sourceRoot,
  inlineSources,
  rootDir,
  format = "string"
}) {
  let root = normalisePath(rootDir || "/");
  let resultMap = { ...map,
    version: 3,
    file,
    sourceRoot
  };
  resultMap.sources = resultMap.sources.map(sourceFilePath => {
    return relatifyPath(sourceFilePath, root);
  });

  if (inlineSources && fs) {
    resultMap.sourcesContent = await Promise.all(resultMap.sources.map(async sourceName => {
      try {
        return await fs.readFile(_path.default.resolve(root, sourceName), "utf-8");
      } catch (e) {
        return null;
      }
    }));
  }

  if (format === "inline" || format === "string") {
    let stringifiedMap = JSON.stringify(resultMap);

    if (format === "inline") {
      return generateInlineMap(stringifiedMap);
    }

    return stringifiedMap;
  }

  return resultMap;
}