{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport pdfjsLib from 'pdfjs';\n\nvar launchGuidePDF = /*#__PURE__*/function (_Component) {\n  _inherits(launchGuidePDF, _Component);\n\n  var _super = _createSuper(launchGuidePDF);\n\n  function launchGuidePDF() {\n    _classCallCheck(this, launchGuidePDF);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(launchGuidePDF, [{\n    key: \"render\",\n    value: function render() {\n      var myState = {\n        pdf: null,\n        currentPage: 1,\n        zoom: 1\n      };\n      pdfjsLib.getDocument('./LaunchGuide.pdf').then(function (pdf) {\n        myState.pdf = pdf;\n        render();\n      });\n\n      function render() {\n        myState.pdf.getPage(myState.currentPage).then(function (page) {\n          var canvas = document.getElementById(\"pdf_renderer\");\n          var ctx = canvas.getContext('2d');\n          var viewport = page.getViewport(myState.zoom);\n          canvas.width = viewport.width;\n          canvas.height = viewport.height;\n          page.render({\n            canvasContext: ctx,\n            viewport: viewport\n          });\n        });\n      } // Go previous button\n\n\n      function prevButton(e) {\n        if (myState.pdf == null || myState.currentPage == 1) return;\n        myState.currentPage -= 1;\n        document.getElementById(\"current_page\").value = myState.currentPage;\n        render();\n      }\n\n      ;\n\n      function nextButton(e) {\n        if (myState.pdf == null || myState.currentPage == myState.pdf._pdfInfo.numPages) {\n          return;\n        } else {\n          myState.currentPage += 1;\n          document.getElementById(\"current_page\").value = myState.currentPage;\n          render();\n        }\n      } // Zoom Functionality\n\n\n      function zoomIn() {\n        if (myState.pdf == null) return;\n        myState.zoom += 0.5;\n        render();\n      }\n\n      ;\n\n      function zoomOut() {\n        if (myState.pdf == null) return;\n        myState.zoom -= 0.5;\n        render();\n      }\n\n      ;\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        id: \"navigation_controls\",\n        style: \"text-align: center;\"\n      }, __jsx(\"button\", {\n        id: \"go_previous\",\n        onclick: prevButton()\n      }, \"Previous\"), __jsx(\"input\", {\n        id: \"current_page\",\n        value: \"1\",\n        type: \"number\"\n      }), __jsx(\"button\", {\n        id: \"go_next\",\n        onclick: nextButton()\n      }, \"Next\")), __jsx(\"div\", {\n        id: \"my_pdf_viewer\"\n      }, __jsx(\"div\", {\n        id: \"canvas_container\"\n      }, __jsx(\"canvas\", {\n        id: \"pdf_renderer\"\n      }))), __jsx(\"div\", {\n        id: \"zoom_controls\",\n        style: \"text-align: center;\"\n      }, __jsx(\"button\", {\n        id: \"zoom_in\",\n        onclick: zoomIn()\n      }, \"+\"), __jsx(\"button\", {\n        id: \"zoom_out\",\n        onclick: zoomOut()\n      }, \"-\"), __jsx(\"p\", {\n        style: \"font-size: small; font-family: Arial, Helvetica, sans-serif;\"\n      }, \"Zoom\")));\n    }\n  }]);\n\n  return launchGuidePDF;\n}(Component);\n\nexport { launchGuidePDF as default };","map":null,"metadata":{},"sourceType":"module"}